doctype 5
html lang='ja'
  head
    == slim :_include
    title = "Character browser: ##{@charsn} of #{@set}"

  body
    == slim :_heading

    == slim :_notification

    - if @motions
      #charinfo.navbar.bg-secondary
        #prev.navbar-section
          p: a href==@prevsn == "&#x21E6; #{@prevsn}"
        #current.navbar-center: p
          = @charsn
          br
          span.text-bold = @charcode
        #next.navbar-section
          p: a href==@nextsn == "#{@nextsn} &#x21E8;"

      #timeline.container: .columns
        / - attrs = CharMotion.attributes.reject { |k, v| v.type == DateTime }.keys
        - @motions.each do |e|
          - m, u = e # [Hash, True/False]
          - mo, doc = m[:motion], m[:document]
          / get undeclared properties -- isn't there a better way?
          - misc = mo.instance_variable_get(:@attributes).except(*mo.declared_properties.registered_properties.keys.map(&:to_s), 'uuid')
          ul.column.motion.menu id=mo.id class="#{'unified bg-secondary' unless u}"
            li.menu-item: .tile.tile-centered.motion-header: .tile-content
              .tile-title.text-bold.text-primary.text-ellipsis title=doc.title = doc.title
              - if doc.doc_id
                .tile-subtitle = "(#{doc.doc_id})"
            li.menu-item data-value=m[:source] = m[:source]
            li.menu-item[data-value=m[:glyph].name]: .tile.tile-centered.motion-header
              - path = m[:glyph].path || "#{doc.doc_id}/#{m[:glyph].name}"
              img.glyph.tile-icon src==url("/images/#{path}") title="glyph"
              p.tile-content = File.basename(path)
            li.menu-item: .tile.tile-centered.motion-header
              - m[:evidences].each do |ev|
                img.evidence.tile-icon.tooltip data-tooltip=ev.path src==url("/images/#{ev.path}") title="evidence"
            li.menu-item 
            li.menu-item[data-value=mo.rad] = "Rad. #{lookup_han(mo.rad)} (#{lookup_kx(mo.rad)} #{mo.rad/10.0})"
            - [mo.sc, mo.fs, mo.ts, mo.ids, mo.similar, mo.total].each do |pt|
              li.menu-item.text-ellipsis data-value=pt title=pt = pt
            li.menu-item.text-bold class="text-#{{live: 'success', postponed: 'warning', withdrawn: 'error'}[mo.status]}" data-value=mo.status = mo.status
            li.menu-item data-value=mo.comment = mo.comment
            - misc.each do |name, val|
              li.menu-item: dl
                  dt = name
                  dd = val
        ul#caption.column.menu.bg-primary.text-right
          li.menu-item: .tile.tile-centered.motion-header: .tile-content File
          li.menu-item Source
          li.menu-item: .tile.tile-centered.motion-header: .tile-content Glyph
          li.menu-item: .tile.tile-centered.motion-header: .tile-content Evidences
          li.menu-item Unifies...
          li.menu-item Radical
          li.menu-item SC
          li.menu-item FS
          li.menu-item T/S
          li.menu-item IDS
          li.menu-item Similar
          li.menu-item Total
          li.menu-item Status
          li.menu-item Comment
